#! /usr/bin/env python
from __future__ import print_function, division

from argparse import ArgumentParser
import logging
import time as tm

from astropy.coordinates import SkyCoord
from astropy.io import fits
import astropy.units as units
from astropy.wcs import WCS
from casacore.tables import table, taql, addImagingColumns
from numba import njit, complex64, complex128, float64, prange
import numpy as np
from scipy.interpolate import griddata
from scipy.ndimage import gaussian_filter
from scipy.optimize import least_squares

from ddcal.coordinates import radec_to_lm, lm_to_radec
from ddcal.mwabeam import MWABeam
import ddcal.skymodel as skymodel
from ddcal.phaserotate import phase_rotate
import ddcal.phaserotate as phaserotate
import ddcal.predict as predict
import ddcal.residuals as residuals


def main():
    parser = ArgumentParser()
    parser.add_argument('--ms', required=True, help="The measurement set to calibrate")
    parser.add_argument('--model', required=True, help="The sky model (skymodel fileformat 1.1)")
    parser.add_argument('--output', default='tec.fits', help="The output FITS file contains the phase corrections")
    parser.add_argument('--center', required=True, help="Coordinate center of the output FITS file (hh:mm:ss dd:mm:ss)")
    parser.add_argument('--radius', type=float, required=True, help="Radius of output FITS file (degrees)")
    parser.add_argument('--scale', type=float, default=0.25, help="Pixel size of output FITS file (degrees)")
    parser.add_argument('--intervals', default=1, type=int, help="The number of calibration intervals")
    parser.add_argument('--refant', default=0, type=int)
    parser.add_argument('--oversample', default=3, type=int)
    parser.add_argument('--smoothing-kernel', default=1, type=float, help="The gaussian smoothing kernal width (sigma) in units of --scale")
    parser.add_argument('--flux-threshold', default=1, type=float, help="Sources with apparent flux values (Jy) under this threshold will not be fit with 2nd order terms")
    parser.add_argument('--metafits', required=True, help="Path to the metafits file")
    args = parser.parse_args()

    logger = logging.getLogger(__name__)
    logger.setLevel('DEBUG')

    center = SkyCoord(args.center, unit=(units.hourangle, units.degree))

    with open(args.model) as f:
        sources = skymodel.parse(f)

    # To simplify things, we fit components separately.
    # This will break for complex, multicomponent sources
    components = [c for source in sources for c in source.components]
    logger.info("%d sources loaded", len(components))

    # Open and process measurement set
    mset = table(args.ms, readonly=False, ack=False)
    antids = np.array(range(0, len(mset.ANTENNA)))
    ra0, dec0 = mset.FIELD.getcell('PHASE_DIR', 0)[0]
    freqs = mset.SPECTRAL_WINDOW.getcell('CHAN_FREQ', 0)
    lambdas = 299792458 / freqs
    midfreq = np.array([(max(freqs) + min(freqs)) / 2])
    midlambda = 299792458 / midfreq

    logger.info("Calculating apparent flux of model sources...")
    # Set beam for each component so that we can later calculate apparent flux
    beam = MWABeam(args.metafits)
    for comp in components:
        comp.beam = beam

    # Calculate apparent flux and reorder components from brightest to dimmest
    components = sorted(components, reverse=True, key=lambda x: sum(x.apparent(midfreq)))
    logger.info("Model sources ordered by apparent flux")

    # Calculate antenna positions wrt antenna 0
    times = sorted(set(mset.getcol('TIME')))
    midtime = times[len(times) // 2]
    refant = args.refant
    tmp = taql("select UVW, ANTENNA2 from $mset where TIME = $midtime and ANTENNA1 = $refant")
    (_U, _V, _), antennas = tmp.getcol('UVW').T, tmp.getcol('ANTENNA2')

    # Force U, V indices to align with antenna IDs
    U = np.zeros_like(antids, dtype=np.float64)
    U[antennas] = _U
    V = np.zeros_like(antids, dtype=np.float64)
    V[antennas] = _V

    # Get non-flagged rows
    mset = taql("select * from $mset where not FLAG_ROW")
    flags = mset.getcol('FLAG')
    ant1 = mset.getcol('ANTENNA1')
    ant2 = mset.getcol('ANTENNA2')
    uvw = mset.getcol('UVW')
    data = np.complex128(mset.getcol('DATA'))
    data[flags] = np.nan

    metadata = phaserotate.Metadata(mset)
    uvw, data = phase_rotate(uvw, data, ra0, dec0, metadata)  # Reset phase direction
    u, v, w = uvw.T[:, :, None] / lambdas

    # Perform directional calibration
    # First pass
    logger.info("Beginning pass 1")
    solutions = []
    for comp in components:
        # Phase rotate onto source and average in frequency
        _, rotated = phase_rotate(uvw, data[:, :, [True, False, False, True]], comp.ra, comp.dec, metadata)
        start = tm.time()
        rotated = freq_average(rotated)[:, None, :]
        elapsed = tm.time() - start
        logger.debug("Frequency averaging elapsed: %g", elapsed)

        # Create model
        model = np.ones_like(rotated)

        # Fit
        logger.debug(
            "Fitting source located at %s...",
            comp.position.to_string('hmsdms'),
        )
        start = tm.time()
        res = least_squares(
            residuals.full_firstorder,
            (comp.apparent(midfreq)[0], comp.apparent(midfreq)[1], 0, 0),
            args=(U, V, ant1, ant2, rotated, model),
            verbose=2,
            x_scale=[1e-2, 1e-2, 1e-5, 1e-5],
        )
        logger.debug("First order fit elapsed: %g", tm.time() - start)
        logger.debug(res.message)
        logger.debug(
            "Model flux: (%g, %g, %g) versus fit flux (Ax Ay): %g %g",
            comp.flux(midfreq),
            comp.apparent(midfreq)[0],
            comp.apparent(midfreq)[1],
            res.x[0],
            res.x[1],
        )
        logger.debug("Fit params: %g %g %g %g", *res.x)

        # If fit converged, add solution or else remove this source from model list
        if res.success:
            Ax, Ay, x, y = res.x
            solutions.append([comp, Ax, Ay, x, y])
        else:
            logger.warning("Fit failed; removing source from model list")
            continue

        # Check for discrepencies between model flux and fitted flux
        if abs(Ax / comp.apparent(midfreq)[0] - 1) > 0.5 or abs(Ay / comp.apparent(midfreq)[1] - 1) > 0.5:
            logger.warning("Flux discrepency!")

        # Peel
        start = tm.time()
        phases = x * U + y * V
        phases = phases[ant1] - phases[ant2]
        l, m = radec_to_lm(comp.ra, comp.dec, ra0, dec0)
        peel(data, u, v, w, l, m, Ax, Ay, phases)
        logger.debug("Peeled first order elapsed: %g", tm.time() - start)

    # Second pass
    logger.info("Beginning pass 2")
    for i, (comp, Ax, Ay, x, y) in enumerate(solutions):
        # Skip 2nd order fitting for faint sources
        if Ax < args.flux_threshold and Ay < args.flux_threshold:
            solutions[i] = [Ax, Ay, x, y, 0, 0, 0]
            continue

        # Unpeel
        start = tm.time()
        phases = x * U + y * V
        phases = phases[ant1] - phases[ant2]
        l, m = radec_to_lm(comp.ra, comp.dec, ra0, dec0)
        unpeel(data, u, v, w, l, m, Ax, Ay, phases)
        logger.debug("Unpeeled elapsed: %g", tm.time() - start)

        # Phase rotate onto source and average in frequency
        _, rotated = phase_rotate(uvw, data[:, :, [True, False, False, True]], comp.ra, comp.dec, metadata)
        start = tm.time()
        rotated = freq_average(rotated)[:, None, :]
        elapsed = tm.time() - start
        logger.debug("Frequency averaging elapsed: %g", elapsed)

        model = np.ones_like(rotated)

        logger.debug(
            "Fitting source located at %s...",
            comp.position.to_string('hmsdms'),
        )
        start = tm.time()
        res = least_squares(
            residuals.full_secondorder,
            (Ax, Ay, x, y, 0, 0, 0),
            args=(U, V, ant1, ant2, rotated, model),
            verbose=2,
            x_scale=[1e-2, 1e-2, 1e-5, 1e-5, 1e-9, 1e-9, 1e-9],
        )
        logger.debug("Second order fit elapsed: %g", tm.time() - start)
        logger.debug(res.message)
        logger.debug(
            "Model flux: (%g, %g, %g) versus fit flux (Ax Ay): %g %g",
            comp.flux(midfreq),
            comp.apparent(midfreq)[0],
            comp.apparent(midfreq)[1],
            res.x[0],
            res.x[1],
        )
        logger.debug("Fit params: %g %g %g %g %g %g %g", *res.x)

        # If fit converged, add solution or else reset solution to first order
        if res.success:
            Ax, Ay, x, y, xx, xy, yy = res.x
            solutions[i] = [Ax, Ay, x, y, xx, xy, yy]
        else:
            logger.warning("Fit failed; resetting to 1st order solution")
            Ax, Ay, x, y, xx, xy, yy = Ax, Ay, x, y, 0, 0, 0
            solutions[i] = [Ax, Ay, x, y, xx, xy, yy]

        # Peel
        start = tm.time()
        phases = x * U + y * V + xx * U**2 + xy * U * V + yy * V**2
        phases = phases[ant1] - phases[ant2]
        l, m = radec_to_lm(comp.ra, comp.dec, ra0, dec0)
        peel(data, u, v, w, l, m, Ax, Ay, phases)
        logger.debug("Peeled second order elapsed: %g", tm.time() - start)

    # Create lists of lm coordinates in the FITS projection for calibration directions
    ras = np.array([comp.ra for comp in components])
    decs = np.array([comp.dec for comp in components])
    directions_lm = radec_to_lm(ras, decs, center.ra.rad, center.dec.rad)

    # Solve phases for each antenna for each calibration direction
    _, _, x, y, xx, xy, yy = np.array(solutions).T
    phases = (
        x[None, :] * U[:, None] +
        y[None, :] * V[:, None] +
        xx[None, :] * U[:, None]**2 +
        xy[None, :] * U[:, None] * V[:, None] +
        yy[None, :] * V[:, None]**2
    )  # [antennas, directions]

    gaintable = table('ddcal.gcal', readonly=False)
    gains = gaintable.getcol('CPARAM')
    gains[:, :, :] = np.exp(-1j * phases[:, 0])[:, None, None]
    gaintable.putcol('CPARAM', gains)
    flags = gaintable.getcol('FLAG')
    flags[:, :] = False
    gaintable.putcol('FLAG', flags)

    # Provision TEC fits file and set up headers
    width, height = int((2 * args.radius) // args.scale), int((2 * args.radius) // args.scale)
    center_x, center_y = int(width // 2), int(height // 2)

    logger.info("Creating TEC image of dimensions (%d, %d)", width, height)

    data = np.zeros((1, 1, len(antids), height, width), dtype=np.float)  # [time, frequency, antennas, dec, ra]
    Atec = fits.PrimaryHDU(data)

    Atec.header['CTYPE1'] = 'RA---SIN'
    Atec.header['CRPIX1'] = center_x
    Atec.header['CRVAL1'] = center.ra.deg
    Atec.header['CDELT1'] = args.scale
    Atec.header['CUNIT1'] = 'deg'

    Atec.header['CTYPE2'] = 'DEC--SIN'
    Atec.header['CRPIX2'] = center_y
    Atec.header['CRVAl2'] = center.dec.deg
    Atec.header['CDELT2'] = args.scale
    Atec.header['CUNIT2'] = 'deg'

    Atec.header['CTYPE3'] = 'ANTENNA'
    Atec.header['CRPIX3'] = 1
    Atec.header['CRVAL3'] = 0

    Atec.header['CTYPE4'] = 'FREQ'
    Atec.header['CRPIX4'] = 1
    Atec.header['CRVAL4'] = midfreq[0]
    Atec.header['CDELT4'] = 1
    Atec.header['CUNIT4'] = 'Hz'

    Atec.header['CTYPE5'] = 'TIME'
    Atec.header['CRPIX5'] = 1
    Atec.header['CRVAL5'] = midtime  # FIXME
    Atec.header['CDELT5'] = 1

    wcs = WCS(Atec.header)

    # Get oversampled l,m values for TEC file
    xx, yy = np.meshgrid(range(0, args.oversample * width), range(0, args.oversample * height))
    pixels = np.array([xx.flatten(), yy.flatten()]).T

    ret = wcs.all_pix2world([[x / args.oversample - 1/args.oversample, y / args.oversample - 1/args.oversample, 0, 0, 0] for x, y in pixels], 0)
    grid_lm = radec_to_lm(np.radians(ret.T[0]), np.radians(ret.T[1]), center.ra.rad, center.dec.rad)

    for i in antids:
        # Compute interpolated phases
        phases_grid = griddata(directions_lm.T, phases[i], grid_lm.T, method='nearest')
        phases_grid = np.reshape(phases_grid, (args.oversample * height, args.oversample * width))  # [ dec, ra ]

        # Gaussian smooth
        phases_grid = gaussian_filter(phases_grid, args.oversample * args.smoothing_kernel, mode='constant', cval=0)

        # Downsample
        phases_grid = phases_grid[1::args.oversample, 1::args.oversample]

        data[0, 0, i] = phases_grid / 8.44797245E9 * midfreq

    Atec.writeto(args.output, overwrite=True)


@njit([(complex128[:, :, :], float64[:, :], float64[:, :], float64[:, :], float64, float64, float64, float64, float64[:])], parallel=True)
def peel(data, u, v, w, l, m, Ax, Ay, phases):
    n = np.sqrt(1 - l**2 - m**2) - 1

    for row in prange(0, u.shape[0]):
        phase = 2j * np.pi * (u[row]*l + v[row]*m + w[row]*n)
        phase = np.exp(phase - 1j * phases[row])

        data[row, :, 0] -= Ax * phase
        data[row, :, 3] -= Ay * phase


@njit([(complex128[:, :, :], float64[:, :], float64[:, :], float64[:, :], float64, float64, float64, float64, float64[:])], parallel=True)
def unpeel(data, u, v, w, l, m, Ax, Ay, phases):
    n = np.sqrt(1 - l**2 - m**2) - 1

    for row in prange(0, u.shape[0]):
        phase = 2j * np.pi * (u[row]*l + v[row]*m + w[row]*n)
        phase = np.exp(phase - 1j * phases[row])

        data[row, :, 0] += Ax * phase
        data[row, :, 3] += Ay * phase


@njit([complex128[:, :](complex128[:, :, :])], parallel=True)
def freq_average(data):
    averaged = np.empty_like(data[:, 0, :])
    for row in prange(0, data.shape[0]):
        for pol in prange(0, data.shape[2]):
            averaged[row, pol] = np.nanmean(data[row, :, pol])

    return averaged


def interpolate(xs, ys, zs, points, power=1):
    dists = np.sqrt((points[:, 0, None] - xs[None, :])**2 + (points[:, 1, None] - ys[None, :])**2)  # [point, xyz]

    weights = 1 / dists**power
    weights = weights / weights.sum(axis=1)[:, None]  # Normalisation

    vals = (weights * zs[None, :]).sum(axis=1)
    return vals


if __name__ == '__main__':
    main()

