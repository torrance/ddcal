#! /usr/bin/env python
from __future__ import print_function, division

from argparse import ArgumentParser
import logging
import time as tm

from astropy.coordinates import SkyCoord
from astropy.io import fits
import astropy.units as units
from astropy.wcs import WCS
from casacore.tables import table, taql, addImagingColumns
import numpy as np
from scipy.interpolate import griddata
from scipy.ndimage import gaussian_filter

import radical.calibrate as calibrate
import radical.constants as constants
from radical.coordinates import radec_to_lm, lm_to_radec
from radical.mwabeam import MWABeam
import radical.skymodel as skymodel
from radical.peel import peel, unpeel
from radical.phaserotate import phase_rotate
from radical.solution import Solution


def main():
    parser = ArgumentParser("radical", description="radical: Radio Astronomy Directional Ionospheric CALibration")
    parser.add_argument('--ms', required=True, help="The measurement set to calibrate")
    parser.add_argument('--model', required=True, help="The sky model (skymodel fileformat 1.1)")
    parser.add_argument('--output', default='tec.fits', help="The output FITS file contains the phase corrections")
    parser.add_argument('--center', required=True, help="Coordinate center of the output FITS file (hh:mm:ss dd:mm:ss)")
    parser.add_argument('--radius', type=float, required=True, help="Radius of output FITS file (degrees)")
    parser.add_argument('--scale', type=float, default=0.25, help="Pixel size of output FITS file (degrees)")
    parser.add_argument('--intervals', default=1, type=int, help="The number of calibration intervals")
    parser.add_argument('--refant', default=0, type=int)
    parser.add_argument('--oversample', default=3, type=int)
    parser.add_argument('--smoothing-kernel', default=1, type=float, help="The gaussian smoothing kernal width (sigma) in units of --scale")
    parser.add_argument('--flux-threshold', default=1, type=float, help="Sources with apparent flux values (Jy) under this threshold will not be fit with 2nd order terms")
    parser.add_argument('--metafits', required=True, help="Path to the metafits file")
    args = parser.parse_args()

    logger = logging.getLogger(__name__)
    logger.setLevel('DEBUG')

    center = SkyCoord(args.center, unit=(units.hourangle, units.degree))

    with open(args.model) as f:
        sources = skymodel.parse(f)

    # To simplify things, we fit components separately.
    # This will break for complex, multicomponent sources
    components = [c for source in sources for c in source.components]
    logger.info("%d sources loaded", len(components))

    # Open and process measurement set
    mset = table(args.ms, readonly=False, ack=False)
    antids = np.array(range(0, len(mset.ANTENNA)))
    ra0, dec0 = mset.FIELD.getcell('PHASE_DIR', 0)[0]
    freqs = mset.SPECTRAL_WINDOW.getcell('CHAN_FREQ', 0)
    lambdas = constants.c / freqs
    midfreq = np.array([(max(freqs) + min(freqs)) / 2])
    midlambda = constants.c / midfreq

    logger.info("Calculating apparent flux of model sources...")
    # Set beam for each component so that we can later calculate apparent flux
    beam = MWABeam(args.metafits)
    for comp in components:
        comp.beam = beam

    # Calculate apparent flux and reorder components from brightest to dimmest
    components = sorted(components, reverse=True, key=lambda x: sum(x.apparent(midfreq)))
    logger.info("Model sources ordered by apparent flux")

    # Calculate antenna positions wrt antenna 0
    times = sorted(set(mset.getcol('TIME')))
    midtime = times[len(times) // 2]
    refant = args.refant
    tmp = taql("select UVW, ANTENNA2 from $mset where TIME = $midtime and ANTENNA1 = $refant")
    (_U, _V, _), antennas = tmp.getcol('UVW').T, tmp.getcol('ANTENNA2')

    # Force U, V indices to align with antenna IDs
    U = np.zeros_like(antids, dtype=np.float64)
    U[antennas] = _U
    V = np.zeros_like(antids, dtype=np.float64)
    V[antennas] = _V

    # Get non-flagged rows
    mset = taql("select * from $mset where not FLAG_ROW")
    flags = mset.getcol('FLAG')
    ant1 = mset.getcol('ANTENNA1')
    ant2 = mset.getcol('ANTENNA2')
    uvw = mset.getcol('UVW')
    data = np.complex128(mset.getcol('DATA'))
    data[flags] = np.nan

    u_lambda, v_lambda, w_lambda = uvw.T[:, :, None] / lambdas

    # Create empty solutions and populate Ax, Ay
    solutions = []
    for comp in components:
        solution = Solution()
        solution.set_params(comp.apparent(midfreq))
        solutions.append(solution)

    # Begin directional calibration
    for order in [1, 2]:
        logger.info("Beginning pass %d", order)

        for comp, solution in zip(components, solutions):
            # Don't try higher order fits if we've previously failed to fit
            if solution.failed:
                continue

            # For second and higher order fits, we need to check for threshold limits
            # and and unpeel previously peeled sources
            if order > 1:
                # Skip 2nd order fitting for faint sources
                if solution.Ax < args.flux_threshold and solution.Ay < args.flux_threshold:
                    continue

                # Unpeel
                start = tm.time()
                phases = solution.phases(U, V)
                phases = phases[ant1] - phases[ant2]
                l, m = radec_to_lm(comp.ra, comp.dec, ra0, dec0)
                unpeel(data, u_lambda, v_lambda, w_lambda, l, m, solution.Ax, solution.Ay, phases)
                logger.debug("Unpeeled elapsed: %g", tm.time() - start)

            # Update solution with best fit
            calibrate.solve(comp, solution, uvw, data, U, V, ant1, ant2, ra0, dec0, lambdas, order)

            # Check for discrepencies between model flux and fitted flux
            if abs(solution.Ax / comp.apparent(midfreq)[0] - 1) > 0.5 or abs(solution.Ay / comp.apparent(midfreq)[1] - 1) > 0.5:
                logger.warning("Flux discrepency!")

            # Peel the source
            start = tm.time()
            phases = solution.phases(U, V)
            phases = phases[ant1] - phases[ant2]
            l, m = radec_to_lm(comp.ra, comp.dec, ra0, dec0)
            peel(data, u_lambda, v_lambda, w_lambda, l, m, solution.Ax, solution.Ay, phases)
            logger.debug("Peeled elapsed: %g", tm.time() - start)

    # Create lists of lm coordinates in the FITS projection for calibration directions
    ras = np.array([comp.ra for i, comp in enumerate(components) if not solutions[i].failed])
    decs = np.array([comp.dec for i, comp in enumerate(components) if not solutions[i].failed])
    directions_lm = radec_to_lm(ras, decs, center.ra.rad, center.dec.rad)

    # Solve phases for each antenna for each calibration direction
    phases = np.empty((len(antids), len(directions_lm)))
    for i, solution in enumerate(solutions):
        if not solution.failed:
            phases[:, i] = solution.phases(U, V)

    gaintable = table('ddcal.gcal', readonly=False)
    gains = gaintable.getcol('CPARAM')
    gains[:, :, :] = np.exp(-1j * phases[:, 0])[:, None, None]
    gaintable.putcol('CPARAM', gains)
    flags = gaintable.getcol('FLAG')
    flags[:, :] = False
    gaintable.putcol('FLAG', flags)
    exit()

    np.save('directions_lm.npy', directions_lm)
    np.save('phases.npy', phases)
    directions_lm = np.load('directions_lm.npy')
    phases = np.load('phases.npy')

    # Provision TEC fits file and set up headers
    width, height = int((2 * args.radius) // args.scale), int((2 * args.radius) // args.scale)
    center_x, center_y = int(width // 2), int(height // 2)

    logger.info("Creating TEC image of dimensions (%d, %d)", width, height)

    data = np.zeros((1, 1, len(antids), height, width), dtype=np.float)  # [time, frequency, antennas, dec, ra]
    Atec = fits.PrimaryHDU(data)

    Atec.header['CTYPE1'] = 'RA---SIN'
    Atec.header['CRPIX1'] = center_x
    Atec.header['CRVAL1'] = center.ra.deg
    Atec.header['CDELT1'] = args.scale
    Atec.header['CUNIT1'] = 'deg'

    Atec.header['CTYPE2'] = 'DEC--SIN'
    Atec.header['CRPIX2'] = center_y
    Atec.header['CRVAl2'] = center.dec.deg
    Atec.header['CDELT2'] = args.scale
    Atec.header['CUNIT2'] = 'deg'

    Atec.header['CTYPE3'] = 'ANTENNA'
    Atec.header['CRPIX3'] = 1
    Atec.header['CRVAL3'] = 0

    Atec.header['CTYPE4'] = 'FREQ'
    Atec.header['CRPIX4'] = 1
    Atec.header['CRVAL4'] = midfreq[0]
    Atec.header['CDELT4'] = 1
    Atec.header['CUNIT4'] = 'Hz'

    Atec.header['CTYPE5'] = 'TIME'
    Atec.header['CRPIX5'] = 1
    Atec.header['CRVAL5'] = midtime  # FIXME
    Atec.header['CDELT5'] = 1

    wcs = WCS(Atec.header)

    # Get oversampled l,m values for TEC file
    xx, yy = np.meshgrid(range(0, args.oversample * width), range(0, args.oversample * height))
    pixels = np.array([xx.flatten(), yy.flatten()]).T

    ret = wcs.all_pix2world([[x / args.oversample - 1/args.oversample, y / args.oversample - 1/args.oversample, 0, 0, 0] for x, y in pixels], 0)
    grid_lm = radec_to_lm(np.radians(ret.T[0]), np.radians(ret.T[1]), center.ra.rad, center.dec.rad)

    for i in antids:
        # Compute interpolated phases
        phases_grid = griddata(directions_lm.T, phases[i], grid_lm.T, method='nearest')
        phases_grid = np.reshape(phases_grid, (args.oversample * height, args.oversample * width))  # [ dec, ra ]

        # Gaussian smooth
        phases_grid = gaussian_filter(phases_grid, args.oversample * args.smoothing_kernel, mode='constant', cval=0)

        # Downsample
        phases_grid = phases_grid[1::args.oversample, 1::args.oversample]

        data[0, 0, i] = phases_grid / 8.44797245E9 * midfreq

    Atec.writeto(args.output, overwrite=True)


def interpolate(xs, ys, zs, points, power=1):
    dists = np.sqrt((points[:, 0, None] - xs[None, :])**2 + (points[:, 1, None] - ys[None, :])**2)  # [point, xyz]

    weights = 1 / dists**power
    weights = weights / weights.sum(axis=1)[:, None]  # Normalisation

    vals = (weights * zs[None, :]).sum(axis=1)
    return vals


if __name__ == '__main__':
    main()

